@startuml

package Diagram <<Rectangle>> {
    class DiagramMxLayer {
        model: MxGraphModel
        graph: MxGraph
        vertexIsPort(vertex: MxCell): Boolean
        beginUpdate()
        endUpdate()
        addListener(name: String, funct: js(MxEventSource, MxEventObject) => Unit)
    }

    class Diagram {
        nodes: ListBuffer[Vertex]
        newNodeId(): Int
        newPortId(): Int
        addNde(vertex: Mxcell, context: BaseProxy): Node
        addNode(context: BaseProxy, x: Int, y: Int, width: Int, height: Int, style: String, relative: Boolean): Node
        findNode(vertex: MxCell): Node
        findNode(id: Int): Node
        findPort(vertex: MxCell): NodePort
        findLink(edge: MxCell): Link
        addLink(edge: MxCell, source: NodePort, target: NodePort): Link
        addLink(source: NodePort, target: NodePort, style: String): Link
        removeNode(node: Node)
        removeNode(vertex: MxCell)
        removeLink(link: Link)
        removeLink(edge: MxCell)
        selectedNodes(): Seq[Node]
        runToNode(node: Node): Unit
        run(): Unit
        toProtocol(): Process
    }

    DiagramMxLayer <|-- Diagram

    package managers {
        class EventManager
        class KeyManager
        class StyleManager
    }

    Diagram --> managers: uses
}

class Node {
    id: Int
    vertex: MxCell
    graph: Graph
    proxy: BaseProxy
    diagram: Diagram
    inPorts: ListBuffer[VertexPort]
    outPorts: ListBuffer[VertexPort]
    x: Double
    y: Double
    width: Double
    height: Double
    moveTo(x: Double, y: Double)
    moveTo(x: Double, y: Double, width: Double, height: Double)
    addInPort(vertex: MxCell): VertexPort
    addOutPort(vertex: MxCell): VertexPort
    addPort(ports: ListBuffer[VertexPort], vertex: MxCell): VertexPort
    findLink(edge: MxCell): Link
    delete()
    toProtocol(): Activity
}

Diagram "1" *-- "many" Node: contains

class NodePort {
    id: Int
    vertex: MxCell
    owner: Vertex
    schema: Schema
    link: Edge
    links: ListBuffer[Edge]
    toProtocol(): ActivityPort
}

Node "1" *-- "many" NodePort: inPorts, outPorts

class Link {
    edge: MxCell
    diagram: Diagram
    from: VertexPort
    to: VertexPort
    connect(src: NodePort, tar: NodePort): Link
    reconnect(newSrc: NodePort, newTar: NodePort): Link
    delete()
    toProtocol: Transition
}

NodePort "1" *-- "many" Link: contains
Link -- NodePort: from, to

@enduml