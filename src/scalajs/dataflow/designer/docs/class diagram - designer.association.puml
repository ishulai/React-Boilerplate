@startuml

class DataFlowDesigner <<(O,#ff7733) singleton>> {
    +canvas: Canvas
    +diagram: Diagram
    +console: Console
    +toolbox: Toolbox
    +dataSources: SourceManager
    +library: CodeManager
    +layout: Layout
    +main(): Unit <<@JSExport>>
    +editCodes(): Unit
    +hideConsole(): Unit
    +showConsole(): Unit
    +clearConsole(): Unit
    +isConsoleVisible: Boolean
}

DataFlowDesigner *---> Canvas
DataFlowDesigner *--> graph.Diagram
DataFlowDesigner *---> Console
DataFlowDesigner *----> Toolbox.Toolbox
DataFlowDesigner *-> SourceManager
DataFlowDesigner *--> CodeEditor

package graph <<refer to graph>> {
    class Diagram
}

class Canvas {
    -container: HTMLElement
    +designer: DataFlowDesigner
    +diagram: Diagram <<temp>>
    +Canvas(owner: DataFlowDesigner, container: HTMLElement, background: String) <<constructor>>
    -openCellMenu(nodes: Seq[Node], x: Int, y: Int): PopupMenu
    -openCanvasMenu(x: Int, y: Int): PopupMenu
}

class CodeEditor {
    -currentCode: Code
    -switching: Boolean
    -codeList: Tree
    -tabs: TabStrip
    -editor: Editor
    -editorPanel: Partition
    -layout: Layout
    +userDefinedUI: HTMLElement
    +CodeEditor(cm: CodeManager) <<constructor>>
    -hideEditor(): Unit
    -showEditor(): Unit
    -addFunction(): Unit
    -addAggregation(): Unit
    -deleteFunctions(): Unit
    -validateCode(): Unit
    -openCode(code: Code): Unit
    +save(): Unit
}

CodeEditor --> CodeManager.CodeManager: edits

namespace CodeManager {

    class CodeManager {
        +codes: ListBuffer[Code]
        +dirty: Boolean
        -getAvailablename(`type`: CodeType): String
        +clearUIElements(): Unit
        +saveAll(): Unit
        +addFunction(): Code
        +addAggregation(): Code
        +find(name: String): Code
        +exists(name: String): Boolean
        +toProtocol: Seq[processmodel.Code]
    }

    class Code {
        +name: String
        +description: String
        +body: String
        +tempBody: String
        +`type`: CodeType
        +dirty: Boolean
        +tab: Tab
        +icon: String
        +node: TreeNode
        +findName(s: String): String
        +save(): Unit
        +clearUIElements(): Unit
        +toProtocol: processmodel.Code
    }

    CodeManager *--> Code

}

class Console {
    -container: HTMLElement
    +designer: DataFlowDesigner
    +userData: Any
    -titleCell: HTMLTableCellElement
    +title: String
    -_contentPane: Partition
    +element: HTMLElement
    +Console(owner: DataFlowDesigner, container: HTMLElement) <<constructor>>
    +display(textContent: String): Unit
    +display(content: HTMLElement): Unit
}

interface DesignerAuxiliary {
    +designer: DataFlowDesigner
    +console: DesignerAuxiliary.Console <<inner object>>
}

class DesignerAuxiliary.Console <<(O,#ff7733) singleton>> {
    +title: String
    +element: HTMLElement
    +visible: Boolean
    +userData: Any
    +display(content: Any, title: String, userData: Any)
    +show()
    +hide()
    +clear()
}

DesignerAuxiliary *-> DesignerAuxiliary.Console

interface Draggable {
    -portPositions: Array[Array[Double]]
    ~makeDraggable(ds: DragSource)
}

~class DragSource <<inner case class>> {
    +element: HTMLElement
    +compSpec: Component
    +caption: String
    +proxy: BaseProxy
    +init: (Node)=>Unit
}

Draggable *--> DragSource

class SourceImporter {
    -proxy: ConnectorProxy
    -connector: ConnectionSelector
    -tables: TableSelector <<lazy>>
    -loader: SchemaLoader <<lazy>>
    -form: EntityDialog
    +completeImport: (DataSource=>_)
    +show(): Unit
}

SourceImporter *--> ConnectionSelector
SourceImporter *--> TableSelector.TableSelector
SourceImporter *--> SchemaLoader


class ConnectionSelector {
    +categoryId: String
    +selected: Component
    -connectors: TileView
    -reg: ComponentRegistry
}


class SchemaLoader {
    +objectsToLoad: DataSource
}


class SourceManager {
    +designer: DataFlowDesigner
    -sources: Tree
    +dataSources: SourceManager.DataSources <<inner object>>
    +SourceManager(owner: DataFlowDesigner) <<constructor>>
    -initSources(p: Partition)
    -validateSources(): Unit
    +dockToToolbox(): Unit
    +dockToDesigner(): Unit
}

SourceManager *--> SourceImporter

class SourceManager.DataSources <<(O,#ff7733) singleton>> {
    -list: ListBuffer[DataSource]
    +length: Int
    + +=(ds: DataSource): ListBuffer[DataSource]
    +clear(): Unit
    +addNew(): Unit
    +importEntities(ds: DataSource, defaultCatalog: String)
    +render(): Unit
}

SourceManager *--> SourceManager.DataSources

namespace TableSelector {

    enum NodeType {
        Database
        Table
    }

    class NodeData <<case class>> {
        +`type`: NodeType
        +schema: String
        +name: String
        +qualifiedName: String
    }

    NodeData -> NodeType

    class TableSelector {
        +proxy: ConnectorProxy
        +defaultCatalog: String
        +selection: DataSource
        -dbTree: Tree
        -navigator: Partition
        -preview: Partition
        +clearPreview(): Unit
    }

    -class EntityPreviewer <<inner class>> {
        -previewArea: Layout
        -title: Partition
        -grid: Partition
        -refreshButton: HTMLImageElement
        +EntityPreviewer(container: HTMLElement, caption: String, params: SchemaQuery) <<constructor>>
        +render(ep: EntityPreview)
        -renderCaption(ep: EntityPreview)
        -renderPreview(ep: EntityPreview)
        {static}+busy(): Unit
    }

    TableSelector *--> EntityPreviewer
    TableSelector -> NodeData
}

namespace Toolbox {

    enum ToolboxView {
        Tile
        Hierarchy
    }

    class Toolbox {
        +complete:()=>_
        -currView: ToolboxView
        -sidebar: Sidebar
        -tree: Tree
        +sourceDock: Partition
        +designer: DataFlowDesigner
        +Toolbox(owner: DataFlowDesigner, container: HTMLElement, complete()=>_) <<constructor>>
        -initViews(p: Partition): Unit
        -initTree(p: Partition, registry: ComponentRegistry)
        -initSearchBox(p: Partition): HTMLTableElement
        -initSidebar(p: Partition, registry: ComponentRegistry)
    }

    Toolbox -> ToolboxView

}

@enduml
