@startuml

interface BaseProxy {

    {abstract} spec: Component
    +node: Vertex
    +menuItems: Seq[MenuObject] <<lazy>>
    +editor: Entity <<not implemented>>
    {field} +runToHere: ()=>_
    {field} +showResult: ()=>_
    {field} +editCompleted: ()=>_
    +edit(): Unit
    +validate(): Boolean
    +toProtocol(): ActivityContext
}

BaseProxy --> MenuFactory

interface ProxyEditor {
    {abstract} proxy: BaseProxy
    +autoGenerateUI: Boolean
    +caption: HTMLInputElement
    +description: HTMLTextAreaElement
    +userDefinedUI: HTMLElement
    +interface(parent: HTMLElement): HTMLElement
    +fill(): Unit
    +collect(): Unit
    ~SchemaGridFieldSpec(name: String, label: String, grid: SchemaGrid, height: Int, validationRule: ()=>Boolean): FieldSpec
    ~SchemaEditorFieldSpec(name: String, label: String, editor: SchemaEditor, height: Int, validationRule: ()=>Boolean): FieldSpec
}

ProxyEditor "1"-->"1" BaseProxy
controls.Entity <|-- ProxyEditor
controls.DomFunction <|-- ProxyEditor

package controls {
    interface Entity {
        <<refer to controls\class diagram - entity>>
    }
    interface DomFunction{
        <<refer to controls\class diagram - base>>
    }
}

class MenuFactory <<(O,#ff7733) singleton>> {
    +copy: js.Function1[MenuItem,_]
    +cut: js.Function1[MenuItem,_]
    +paste: js.Function1[MenuItem,_]
    +delete: js.Function1[MenuItem,_]
    +GlobalIds: GlobalIds <<inner object>>
    +Items: Items <<inner object>>
}

MenuFactory *--> GlobalIds
MenuFactory *--> Items

class GlobalIds <<(O,#ff7733) singleton>> {
    copy
    cut
    paste
    delete
    seperator
    localItem
}

class Items <<(O,#ff7733) singleton>> {
    {method}+copy
    {method}+cut
    {method}+paste
    {method}+delete
    +local(icon: String, caption: String, f: js.Function1[MenuItem,_]): MenuItem
    +join(contexts: Seq[BzaseProxy]): PopupMenu
}

package base.controls {

    class SchemaEditor {
        +schema: Schema
        +editable: GridSwitches
        -buttons: Seq[ToolbarItem]
        -grid: SchemaGrid
        -finalButtons: Seq[Button]
        +complete(): Unit
        +collect(): Schema
        +clear(): Unit
        +isEmpty(): Boolean
        +nonEmpty(): Boolean
        +render(container: HTMLElement): HTMLElement
        -addNewColumn(): Unit
        +addNewColumn(name: String, dataType: String): Unit
        -deleteColumns(): Unit
    }

    class SchemaGrid {
        +schema: Schema
        +visibility: GridSwitches
        +editable: GridSwitches
        -indices: GridIndices
        -grid: DataGrid
        {field} +onRowChecked: (HTMLTableRowElement, Boolean)=>_
        +defaultCaptions: Array[String]
        +SchemaGrid(schema: Schema, visibility: GridSwitches, editable: GridSwitches) <<constructor>>
        +complete(): Unit
        +isValid(): Boolean
        +isEmpty(): Boolean
        +nonEmpty(): Boolean
        +collect(selectedOnly: Boolean): Schema
        +appendRow(data: Seq[String]): Unit
        +checkedCount(): Int
        +deleteCheckedRows(): Unit
        +clear(): Unit
        +render(): HTMLElement
        +render(container: HTMLElement): HTMLElement
        -serialize(): XML
    }
    
    class GridSwitches <<case class>> {
        +name: Boolean
        +dataType: Boolean
        +alias: Boolean
        +newType: Boolean
        +nullable: Boolean
        +side: Boolean
        +selected: Boolean
        +aggfunc: Boolean
        +userfunc: Boolean
        +toIndices(): GridIndices
        +renderSchema(sb: StringBuilder, names: Array[String])
    }
    
    class ColumnIndices <<case class>> {
        +name: Int
        +dataType: Int
        +alias: Int
        +newType: Int
        +nullable: Int
        +side: Int
        +selected: Int
        +aggfunc: Int
        +userfunc: Int
    }

}

@enduml
